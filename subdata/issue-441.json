{"url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/1591", "repository_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT", "labels_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/1591/labels{/name}", "comments_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/1591/comments", "events_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/1591/events", "html_url": "https://github.com/Significant-Gravitas/Auto-GPT/issues/1591", "id": 1669433614, "node_id": "I_kwDOJKSTjM5jgYkO", "number": 1591, "title": "User Feedback leads to endless thinking freeze and not writing before that", "user": {"login": "GoMightyAlgorythmGo", "id": 51217158, "node_id": "MDQ6VXNlcjUxMjE3MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51217158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GoMightyAlgorythmGo", "html_url": "https://github.com/GoMightyAlgorythmGo", "followers_url": "https://api.github.com/users/GoMightyAlgorythmGo/followers", "following_url": "https://api.github.com/users/GoMightyAlgorythmGo/following{/other_user}", "gists_url": "https://api.github.com/users/GoMightyAlgorythmGo/gists{/gist_id}", "starred_url": "https://api.github.com/users/GoMightyAlgorythmGo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GoMightyAlgorythmGo/subscriptions", "organizations_url": "https://api.github.com/users/GoMightyAlgorythmGo/orgs", "repos_url": "https://api.github.com/users/GoMightyAlgorythmGo/repos", "events_url": "https://api.github.com/users/GoMightyAlgorythmGo/events{/privacy}", "received_events_url": "https://api.github.com/users/GoMightyAlgorythmGo/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2023-04-15T14:31:20Z", "updated_at": "2023-04-15T15:26:13Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### Duplicates\r\n\r\n- [X] I have searched the existing issues\r\n\r\n### Steps to reproduce \ud83d\udd79\r\n\r\nIt woks again when i restart but that usually means progress loss (cache etc..)\r\n\r\nI have experience with this, this is the typical behaviour if you tell it too much stuff at once making it forget the stuff it is holding in mind. But if you only say something once it will be more fine. But i still cant explain why it then was stuck thinking and not responding in JSON at all i had to ctrl+c shut it down. Today has been ruth with AutoGPT\r\n\r\nUser Feedback leads to erros if it is not rare but if it is rare chatGPT might not react to it. I think there need to be more than 1 agents to handle user input. There should be a team of agents. Since a new chat does not cost anything and only promt reading and writing cost anything i suggest making a large team with different roles that all contribute a small thing.\r\n\r\n### Current behavior \ud83d\ude2f\r\n\r\nFirst it works (well it does seem to do strangely little , somethimes its Arguments are full of blue text and somethimes it seems to not relly do anything) then it has those \"i dont write  anything anyore\" and then it was stuck thinking forever, totally strange.\r\nStable version 16:00 15.04.2023 restart fixes and feedback seems like poison. Maybe i have to write behind every feedback \"but ignore this feedback and continue in JSON\" then it more often seems to respond in JSON and keeps running for longer more often\r\n\r\nPLAN:\r\n-  Define a unique prefix based on the end goal/application\r\n-  Combine this prefix with a random number to create unique keys for the agents\r\n-  Store the keys in a text file for easy reference later\r\n-  Create individual agents and assign them to specific tasks\r\n-  Prioritize creating agents that serve as tools, combined clusters, or teams\r\n-  Ensure effective communication among the agents\r\nCRITICISM:  We should ensure that the agents have the necessary skill sets and expertise to complete their tasks effectively. In addition, we should consider the potential for unexpected changes or errors and design agents that can handle such situations properly. We should also consider periodically reviewing the roles and responsibilities assigned to each agent, to ensure that they are still relevant and effective. Finally, we should create a mechanism for reviewing the self-checks and logs generated by the agents to verify that they are accurate and up-to-date.\r\nAttempting to fix JSON by finding outermost brackets\r\nApparently json was fixed.\r\nNEXT ACTION:  COMMAND = write_to_file ARGUMENTS = {'file': 'agent_keys.txt', 'text': '<insert generated unique agent keys>'}\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 'n' to exit program, or enter feedback for AI_GPT_8...\r\nInput:y -2\r\n-=-=-=-=-=-=-= COMMAND AUTHORISED BY USER -=-=-=-=-=-=-=\r\nSYSTEM:  Command write_to_file returned: File written to successfully.\r\nAI_GPT_8 THOUGHTS:  Our goal is to create a meta-learning language model software that can autonomously develop and improve itself over time. The first step towards achieving this goal is to define a series of sub-goals that we can work towards. We will start by breaking down the larger goal into smaller, more manageable tasks. We can then prioritize these tasks based on their importance and feasibility. After that, we can further break down the tasks into subtasks, and create a detailed roadmap for completing each one. This will include identifying dependencies between tasks and subtasks, and accounting for contingencies in case of unexpected changes or errors.\r\nREASONING:  Breaking down the larger goal into smaller, more manageable tasks will make it easier to track progress and ensure that each task is properly addressed. Prioritizing tasks based on importance and feasibility will help us stay focused and avoid burning out early in the process. Breaking down tasks into subtasks will help us fully understand the complexity of each task, and create detailed plans to address them effectively. Identifying dependencies between tasks will help us prioritize the most critical tasks, and accounting for contingencies will help us avoid setbacks or delays due to unexpected changes or errors.\r\nPLAN:\r\n-  Break down the larger goal into smaller, more manageable tasks\r\n-  Prioritize tasks based on their importance and feasibility\r\n-  Break down tasks into subtasks and create a detailed roadmap for completing each one\r\n-  Identify dependencies between tasks and subtasks\r\n-  Account for contingencies in case of unexpected changes or errors\r\nCRITICISM:  We should ensure that we do not get too bogged down in planning and subtasking, and that we strike a balance between planning and execution. We should be mindful of unforeseen problems and changes that may arise and adjust our plans accordingly. We should keep records of progress to avoid duplicating efforts and to build on past progress effectively. Finally, we should create a system for regularly revisiting our plans and goals to ensure that we are still on track.\r\nAttempting to fix JSON by finding outermost brackets\r\nApparently json was fixed.\r\nNEXT ACTION:  COMMAND = do_nothing ARGUMENTS = {}\r\nSYSTEM:  Command do_nothing returned: No action performed.\r\nAI_GPT_8 THOUGHTS:  To begin with, let's break down the large goal of creating a meta-learning language model software that can autonomously develop and improve itself over time into smaller, more manageable tasks. We can start with the following smaller goals: 1. Gather relevant resources and information on existing language models and their development\r\n processes. 2. Design a modular approach to development, where each module serves as a building block towards the end goal. 3. Start putting together a foundational set of modules that can be used as tools for future development. 4. Optimize the foundational modules for speed, efficiency, and error-resistance, so that they can be used as a base for more complex functionalities. 5. Create a mechanism for tracking progress and logging important data, to ensure that we are building on past progress effectively.\r\nREASONING:  Breaking down the larger goal into smaller goals will help us focus on specific aspects of the end goal that we can begin to work on now. Gathering resources and information on existing language models will help us better understand the problem domain and learn from best-practices. Designing a modular approach to development will ensure that we can gradually build towards the end goal, while minimizing the impact of errors or setbacks. Creating foundational modules will help us establish a strong base to build upon, while optimizing these modules will make them more effective and efficient. Finally, creating a mechanism for tracking progress and logging important data will help us stay organized and build upon past progress effectively.\r\nPLAN:\r\n-  Gather relevant resources and information on existing language models and their development processes.\r\n-  Design a modular approach to development\r\n-  Start putting together a foundational set of modules\r\n-  Optimize foundational modules for speed, efficiency, and error-resistance\r\n-  Create a mechanism for tracking progress\r\nCRITICISM:  We should ensure that we do not get bogged down in carefully crafting the foundational modules before we have planned out how they will work together. Instead, we should aim to create a functional prototype of a meta-learning language model software first, and then optimize and build upon it iteratively. We should ensure that we prioritize tasks based on their importance and feasibility, and always aim to maintain an efficient balance between planning and execution. Finally, we should communicate regularly with our user to ensure that we are on track and aligned with their goals.\r\nAttempting to fix JSON by finding outermost brackets\r\nApparently json was fixed.\r\nNEXT ACTION:  COMMAND = do_nothing ARGUMENTS = {}\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 'n' to exit program, or enter feedback for AI_GPT_8...\r\nInput:Why are you choosing the command do_nothing?\r\nSYSTEM:  Human feedback: Why are you choosing the command do_nothing?\r\n  Warning: Failed to parse AI output, attempting to fix.\r\n If you see this warning frequently, it's likely that your prompt is confusing the AI. Try changing it up slightly.\r\nFailed to fix AI output, telling the AI.\r\nError: Invalid JSON\r\n  I chose the command \"do_nothing\" because the thoughts section of the response was just an analysis of how we could break down the larger goal of creating a meta-learning language model software into smaller goals. There was no specific command to execute yet, so it was appropriate to respond with the \"do_nothing\" command until we determine the next appropriate step.\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nAI_GPT_8 THOUGHTS:  None\r\nREASONING:  None\r\nCRITICISM:  None\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nNEXT ACTION:  COMMAND = Error: ARGUMENTS = 'dict' object has no attribute 'replace'\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 'n' to exit program, or enter feedback for AI_GPT_8...\r\nInput:Oh ok that makes sense so you are aware that you do that. Then i guess when i see a promising plan or thought/resoning of you i will write a input saying \"do the last thing\r\n\" or do i have to write something more spesific? THen i will write like now: Respond in JSON\r\nSYSTEM:  Human feedback: Oh ok that makes sense so you are aware that you do that. Then i guess when i see a promising plan or thought/resoning of you i will write a input saying\r\n \"do the last thing\" or do i have to write something more spesific? THen i will write like now: Respond in JSON\r\n  Warning: Failed to parse AI output, attempting to fix.\r\n If you see this warning frequently, it's likely that your prompt is confusing the AI. Try changing it up slightly.\r\nFailed to fix AI output, telling the AI.\r\nError: Invalid JSON\r\n  Yes, if you want me to continue with the same plan or action, you can simply write \"do the last thing\" in the next input. However, if I need further information or clarification from you, I may ask additional questions.\r\n\r\nAs for your request, I am ready to respond in JSON format. What would you like me to do or provide thoughts on?\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nAI_GPT_8 THOUGHTS:  None\r\nREASONING:  None\r\nCRITICISM:  None\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nNEXT ACTION:  COMMAND = Error: ARGUMENTS = 'dict' object has no attribute 'replace'\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 'n' to exit program, or enter feedback for AI_GPT_8...\r\nInput:Ok. You can contine from now on i will try to give more feedback. Any wishes the feedback should take form in? Maybe i should struckture it a sertain way. Or lenght or time\r\n it differently or a spesific format [this] [that] and such?\r\nSYSTEM:  Human feedback: Ok. You can contine from now on i will try to give more feedback. Any wishes the feedback should take form in? Maybe i should struckture it a sertain way. Or lenght or time it differently or a spesific format [this] [that] and such?\r\n  Warning: Failed to parse AI output, attempting to fix.\r\n If you see this warning frequently, it's likely that your prompt is confusing the AI. Try changing it up slightly.\r\nFailed to fix AI output, telling the AI.\r\nError: Invalid JSON\r\n  Sure! Thank you for offering to give feedback.\r\n\r\nFor the feedback format, it would be helpful if you could provide it in a structured way, such as bullet points or numbered lists. This will make it easier for me to understand your feedback and respond accordingly.\r\n\r\nIn terms of length or timing, there is no specific requirement. However, it would be helpful to receive feedback after every few commands or actions, so that I can make adjustments and improvements more efficiently.\r\n\r\nPlease feel free to let me know if you have any specific requests or preferences for the feedback format.\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nAI_GPT_8 THOUGHTS:  None\r\nREASONING:  None\r\nCRITICISM:  None\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nNEXT ACTION:  COMMAND = Error: ARGUMENTS = 'dict' object has no attribute 'replace'\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 'n' to exit program, or enter feedback for AI_GPT_8...\r\nInput:Is it okay when i write: \"continue with JSON\" behind it so you go right back to continuing?\r\nSYSTEM:  Human feedback: Is it okay when i write: \"continue with JSON\" behind it so you go right back to continuing?\r\n  Warning: Failed to parse AI output, attempting to fix.\r\n If you see this warning frequently, it's likely that your prompt is confusing the AI. Try changing it up slightly.\r\nFailed to fix AI output, telling the AI.\r\nError: Invalid JSON\r\n  Yes, that would be helpful. You can simply write \"continue with JSON\" in your next input and I will continue with my response.\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nAI_GPT_8 THOUGHTS:  None\r\nREASONING:  None\r\nCRITICISM:  None\r\nAttempting to fix JSON by finding outermost brackets\r\nError: Invalid JSON, setting it to empty JSON now.\r\n\r\nNEXT ACTION:  COMMAND = Error: ARGUMENTS = 'dict' object has no attribute 'replace'\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 'n' to exit program, or enter feedback for AI_GPT_8...\r\nInput:continue with JSON\r\nSYSTEM:  Human feedback: continue with JSON\r\nAI_GPT_8 THOUGHTS:\r\nREASONING:\r\nCRITICISM:\r\nAttempting to fix JSON by finding outermost brackets\r\nApparently json was fixed.\r\nNEXT ACTION:  COMMAND =  ARGUMENTS = {}\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 'n' to exit program, or enter feedback for AI_GPT_8...\r\nInput:There was no text. you togga write thought resoning critisim plan and so on\r\nSYSTEM:  Human feedback: There was no text. you togga write thought resoning critisim plan and so on\r\n\r\n### Expected behavior \ud83e\udd14\r\n\r\nmore blue arguments meaning it doing stuff and not thinking foever and basically freezing\r\n\r\n### Your prompt \ud83d\udcdd\r\n\r\n```yaml\r\nC:\\Programming\\Auto-GPT_AI_8>python -m autogpt\r\nError creating Redis search index:  Index already exists\r\nWelcome back!  Would you like me to return to being AI_GPT_8?\r\nContinue with the last settings?\r\nName:  AI_GPT_8\r\nRole:  Auto-GPT is software designed to iteratively and autonomously develop a new languagemodel-based system on the User/s PC should do meta-learning with the help of neural networks, machine learning etc. Auto-GPT should leverage existing e.g. python resources, imports, and online content to enhance an existing free language model. The goal is to enable Auto-GPT to create a self-improving system that becomes more efficient and effective over time, despite Auto-GPT/s own memory retrival/loss problems and other challenges. For selfawareness it likely helps Auto-GPT to analyze its source code files at C:\\Programming\\Auto-GPT_AI_8 or other reserach e.g. online. Suggestions Create python files for individual actions. Then in a modular fassion string them together in new python files as a foundation for more complex chains of actions without having to individually run them. Save them with different names, and maybe a number, according to the task they serve. You can then reuse them whenever needed. Make sure you remember them to effectively use them and so you dont duplicate files for no reason. Begin with simple actions files that provide the foundation for more compex actionchains by calling multible of them in new python files. Important, you always have to follow the commands outlined in the folder \"commands_from_user\" go to that directory and read the folder and filenames (they give you hints what to do), you have to read all the .txt files inside \"commands_from_user\" and take action based on the folder names that contain them. Periodically you have to prepare a report for the User about what you have done recently, e.g. plans/goals you have for the next 10-60 min, challenges/setbacks/problems. You can and should communicate by writing \"letters\" to the User, by saving them as txt files inside the folder \"message_to_user\". Wait/do other things until the User responds, then read his response he will append to your message/letter inside the txt. You work for and are invested in the Users success and always carefully consider or follow his input. Important, use teams of agents that usefully/partially act like human teams e.g. communicating, collaborating, having individual roles, skillsets/expertise, goals, splitting of work etc and optimally help the teams goal/s or task/s. Those teams should help the project/development of what the User requests and his main goal (the application).(You can read the AI-role, User description of the endgoal/application or deduce from feedback over time for more details.)\r\nGoals: [\"Improve a modular approach to development, where task's lead to for example self-contained, components or modules. Then taking existing components, modules etc. and combining / using them as tools or combined clusters for ever increasing effitiency and all aspects of progress culminating in the endgoal. This will allow Auto-GPT to gradually build up the endgoal/metalerningLM-software and milestones/nessesary tools towards it. while minimizing the impact of errors or setbacks. Example, two agent team almost acting like two cooperating humans traking Time and date per %-/progress, then based on insigts and trends improve workflow, to sustainably improve speed, quality, resilience and importantly be able to work under constant partial change, unexpected datalos, confusion/chaos as AI-L.M's acting a bit like perfect human professionals would.\", \"Break down and improve components of the development process into small, manageable tasks. Improve text file records or logs or machanism/s. Use systems that that you (Auto-GPT) can follow. And that let you progress on previous programs and files you made. Improve the foundations of files and folders you make to increase the maximum speed you make towards the main goal. Build upon previous progress since there is for now a 1 week deadline long project that might be extended if you show you are capable of making progress by building on past progress Maybe you need to improve/build/copy/download/get things that allow you to make faster progress or be able to build upon previous work at all. Auto-GPT + integrated l.m.'s probably use databases and files to recall and plan, but the l.m.'s might lose most/all cached memory figure our or improve on continuing where you last left off.\", 'Improve the development process by analyzing records/logs. If a task is not completed within a specified time frame, Auto-GPT should move on to the next task, and note the issue in the log file for later review. Periodically review & apply from this path C:\\\\Programming\\\\Auto-GPT_AI_8\\\\auto_gpt_workspace\\\\User_input the least tryed ideas/suggestions, especially those inside the folder \"Priority\". Make sure you react and take into account the one Users feedback. Improving seamless continuation of previous progress between shutdowns is a priority since continuing and building itteratively seems to be the biggest challenge between errors, and forgetting and being sidetracked by things not working. Make improvements that conect into each other and you can always find and continue again even when losing most memory. Improve that transition between restarts every 10-60 minutes!', \"Improve checkpoint mechanism/s that periodically save/s compelted milestones, relevant data as text files. Implement a monitoring and feedback mechanism that analyzes existing files. Use this analysis to find patterns/issues/etc that cause setbacks or failures, and adapt the development process accordingly to improve efficiency, error-resistance and seamless continuation of previous progress between shutdowns that happen (every 5-25 minutes, with maybe a maximum of 1 hour of continus work without criticall erros wiping some memory/cache/etc. It's like constantly being interrupted and working with multible different AI chats AI-LMs that have to work together and/or alongside each other and work autonomously on plans that are part of a bigger overarching effort to reach the goal within a deadline.\", 'Track and iteratively make small improvements to the modular development approach. Depending on the development stage mildly prioritice reusable self-contained components and tasks that serve as the foundation for more complex functionalities, with the goal to balance being eventually faster but also not overpreparing while not being aware that you lost sight of what you already did or unvorseen future changes that will change plans. For tyding up, mindfully reducing chaos and red tape and staying organized and connected make a teams of agents that behave similar to human teams with a sertan split or work/responisbility/focus. Periodically se such teams of agents when optimal for other things. Make a team that communicated with other agents collects information on what best to use such teams for and then creates them. The teams agents will have names and communicate and discuss things between themselfes etc, whatever is best. Specialized teams with meetings having the perfect combination of human skills are perfect for complex issues. They should lern about the project and all parts. Make a team that specializes in brifing agent teams.']\r\nContinue (y/n): y\r\nUsing memory of type: RedisMemory\r\nAI_GPT_8 THOUGHTS:  Based on the current situation, I suggest co\r\n```\r\n", "reactions": {"url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/1591/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/1591/timeline", "performed_via_github_app": null, "state_reason": "reopened"}