{"url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/3400", "repository_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT", "labels_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/3400/labels{/name}", "comments_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/3400/comments", "events_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/3400/events", "html_url": "https://github.com/Significant-Gravitas/Auto-GPT/issues/3400", "id": 1686772854, "node_id": "I_kwDOJKSTjM5kihx2", "number": 3400, "title": "Issue with running test it keep asking for container to be installed", "user": {"login": "DMTarmey", "id": 590474, "node_id": "MDQ6VXNlcjU5MDQ3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/590474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DMTarmey", "html_url": "https://github.com/DMTarmey", "followers_url": "https://api.github.com/users/DMTarmey/followers", "following_url": "https://api.github.com/users/DMTarmey/following{/other_user}", "gists_url": "https://api.github.com/users/DMTarmey/gists{/gist_id}", "starred_url": "https://api.github.com/users/DMTarmey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DMTarmey/subscriptions", "organizations_url": "https://api.github.com/users/DMTarmey/orgs", "repos_url": "https://api.github.com/users/DMTarmey/repos", "events_url": "https://api.github.com/users/DMTarmey/events{/privacy}", "received_events_url": "https://api.github.com/users/DMTarmey/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2023-04-27T12:41:03Z", "updated_at": "2023-04-28T15:09:31Z", "closed_at": null, "author_association": "NONE", "active_lock_reason": null, "body": "### \u26a0\ufe0f Search for existing issues first \u26a0\ufe0f\n\n- [X] I have searched the existing issues, and there is no existing issue for my problem\n\n### Which Operating System are you using?\n\nWindows\n\n### Which version of Auto-GPT are you using?\n\nLatest Release\n\n### GPT-3 or GPT-4?\n\nGPT-3.5\n\n### Steps to reproduce \ud83d\udd79\n\nNEXT ACTION:  COMMAND = execute_python_file ARGUMENTS = {'filename': 'C:\\\\Users\\\\Dell User\\\\Auto-GPT\\\\autogpt\\\\auto_gpt_workspace\\\\test_pincone_api.py'}\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 's' to run self-feedback commands'n' to exit program, or enter feedback for ...\r\nInput:y\r\n-=-=-=-=-=-=-= COMMAND AUTHORISED BY USER -=-=-=-=-=-=-= \r\nExecuting file 'C:\\Users\\Dell User\\Auto-GPT\\autogpt\\auto_gpt_workspace\\test_pincone_api.py'\r\nCould not run the script in a container. If you haven't already, please install Docker https://docs.docker.com/get-docker/\r\nSYSTEM:  Command execute_python_file returned: Error: Error while fetching server API version: (2, 'CreateFile', 'The system cannot find the file specified.')\r\n THOUGHTS:  I need to execute the Python script to test the Pincone API with a simple query.\r\nREASONING:  Executing the Python script will allow me to test the Pincone API with a simple query and catch any issues early on.\r\nPLAN: \r\n-  Execute the Python script to test the Pincone API with a simple query\\n- Verify that the Pincone API is functioning correctly\r\nCRITICISM:  I need to ensure that I am thoroughly reviewing the response from the Pincone API to \r\ncatch any potential issues.\r\nNEXT ACTION:  COMMAND = execute_python_file ARGUMENTS = {'filename': 'C:\\\\Users\\\\Dell User\\\\Auto-GPT\\\\autogpt\\\\auto_gpt_workspace\\\\test_pincone_api.py'}\r\nEnter 'y' to authorise command, 'y -N' to run N continuous commands, 's' to run self-feedback commands'n' to exit program, or enter feedback for ...\n\n### Current behavior \ud83d\ude2f\n\nits going around trying to connect to pinecone but keep finding coding for container which io didnt use and it cant move forward no matter what i do\n\n### Expected behavior \ud83e\udd14\n\nfix current issue\n\n### Your prompt \ud83d\udcdd\n\n```yaml\r\n# Paste your prompt here\r\n```\r\n\n\n### Your Logs \ud83d\udcd2\n\n```log\r\n<insert your logs here>\r\n```\r\n\"\"\"Logging module for Auto-GPT.\"\"\"\r\nimport json\r\nimport logging\r\nimport os\r\nimport random\r\nimport re\r\nimport time\r\nimport traceback\r\nfrom logging import LogRecord\r\n\r\nfrom colorama import Fore, Style\r\n\r\nfrom autogpt.singleton import Singleton\r\nfrom autogpt.speech import say_text\r\n\r\n\r\nclass Logger(metaclass=Singleton):\r\n    \"\"\"\r\n    Logger that handle titles in different colors.\r\n    Outputs logs in console, activity.log, and errors.log\r\n    For console handler: simulates typing\r\n    \"\"\"\r\n\r\n    def __init__(self):\r\n        # create log directory if it doesn't exist\r\n        this_files_dir_path = os.path.dirname(__file__)\r\n        log_dir = os.path.join(this_files_dir_path, \"../logs\")\r\n        if not os.path.exists(log_dir):\r\n            os.makedirs(log_dir)\r\n\r\n        log_file = \"activity.log\"\r\n        error_file = \"error.log\"\r\n\r\n        console_formatter = AutoGptFormatter(\"%(title_color)s %(message)s\")\r\n\r\n        # Create a handler for console which simulate typing\r\n        self.typing_console_handler = TypingConsoleHandler()\r\n        self.typing_console_handler.setLevel(logging.INFO)\r\n        self.typing_console_handler.setFormatter(console_formatter)\r\n\r\n        # Create a handler for console without typing simulation\r\n        self.console_handler = ConsoleHandler()\r\n        self.console_handler.setLevel(logging.DEBUG)\r\n        self.console_handler.setFormatter(console_formatter)\r\n\r\n        # Info handler in activity.log\r\n        self.file_handler = logging.FileHandler(\r\n            os.path.join(log_dir, log_file), \"a\", \"utf-8\"\r\n        )\r\n        self.file_handler.setLevel(logging.DEBUG)\r\n        info_formatter = AutoGptFormatter(\r\n            \"%(asctime)s %(levelname)s %(title)s %(message_no_color)s\"\r\n        )\r\n        self.file_handler.setFormatter(info_formatter)\r\n\r\n        # Error handler error.log\r\n        error_handler = logging.FileHandler(\r\n            os.path.join(log_dir, error_file), \"a\", \"utf-8\"\r\n        )\r\n        error_handler.setLevel(logging.ERROR)\r\n        error_formatter = AutoGptFormatter(\r\n            \"%(asctime)s %(levelname)s %(module)s:%(funcName)s:%(lineno)d %(title)s\"\r\n            \" %(message_no_color)s\"\r\n        )\r\n        error_handler.setFormatter(error_formatter)\r\n\r\n        self.typing_logger = logging.getLogger(\"TYPER\")\r\n        self.typing_logger.addHandler(self.typing_console_handler)\r\n        self.typing_logger.addHandler(self.file_handler)\r\n        self.typing_logger.addHandler(error_handler)\r\n        self.typing_logger.setLevel(logging.DEBUG)\r\n\r\n        self.logger = logging.getLogger(\"LOGGER\")\r\n        self.logger.addHandler(self.console_handler)\r\n        self.logger.addHandler(self.file_handler)\r\n        self.logger.addHandler(error_handler)\r\n        self.logger.setLevel(logging.DEBUG)\r\n\r\n        self.speak_mode = False\r\n\r\n    def typewriter_log(\r\n        self, title=\"\", title_color=\"\", content=\"\", speak_text=False, level=logging.INFO\r\n    ):\r\n        if speak_text and self.speak_mode:\r\n            say_text(f\"{title}. {content}\")\r\n\r\n        if content:\r\n            if isinstance(content, list):\r\n                content = \" \".join(content)\r\n        else:\r\n            content = \"\"\r\n\r\n        self.typing_logger.log(\r\n            level, content, extra={\"title\": title, \"color\": title_color}\r\n        )\r\n\r\n    def debug(\r\n        self,\r\n        message,\r\n        title=\"\",\r\n        title_color=\"\",\r\n    ):\r\n        self._log(title, title_color, message, logging.DEBUG)\r\n\r\n    def warn(\r\n        self,\r\n        message,\r\n        title=\"\",\r\n        title_color=\"\",\r\n    ):\r\n        self._log(title, title_color, message, logging.WARN)\r\n\r\n    def error(self, title, message=\"\"):\r\n        self._log(title, Fore.RED, message, logging.ERROR)\r\n\r\n    def _log(self, title=\"\", title_color=\"\", message=\"\", level=logging.INFO):\r\n        if message:\r\n            if isinstance(message, list):\r\n                message = \" \".join(message)\r\n        self.logger.log(level, message, extra={\"title\": title, \"color\": title_color})\r\n\r\n    def set_level(self, level):\r\n        self.logger.setLevel(level)\r\n        self.typing_logger.setLevel(level)\r\n\r\n    def double_check(self, additionalText=None):\r\n        if not additionalText:\r\n            additionalText = (\r\n                \"Please ensure you've setup and configured everything\"\r\n                \" correctly. Read https://github.com/Torantulino/Auto-GPT#readme to \"\r\n                \"double check. You can also create a github issue or join the discord\"\r\n                \" and ask there!\"\r\n            )\r\n\r\n        self.typewriter_log(\"DOUBLE CHECK CONFIGURATION\", Fore.YELLOW, additionalText)\r\n\r\n\r\n\"\"\"\r\nOutput stream to console using simulated typing\r\n\"\"\"\r\n\r\n\r\nclass TypingConsoleHandler(logging.StreamHandler):\r\n    def emit(self, record):\r\n        min_typing_speed = 0.05\r\n        max_typing_speed = 0.01\r\n\r\n        msg = self.format(record)\r\n        try:\r\n            words = msg.split()\r\n            for i, word in enumerate(words):\r\n                print(word, end=\"\", flush=True)\r\n                if i < len(words) - 1:\r\n                    print(\" \", end=\"\", flush=True)\r\n                typing_speed = random.uniform(min_typing_speed, max_typing_speed)\r\n                time.sleep(typing_speed)\r\n                # type faster after each word\r\n                min_typing_speed = min_typing_speed * 0.95\r\n                max_typing_speed = max_typing_speed * 0.95\r\n            print()\r\n        except Exception:\r\n            self.handleError(record)\r\n\r\n\r\nclass ConsoleHandler(logging.StreamHandler):\r\n    def emit(self, record) -> None:\r\n        msg = self.format(record)\r\n        try:\r\n            print(msg)\r\n        except Exception:\r\n            self.handleError(record)\r\n\r\n\r\nclass AutoGptFormatter(logging.Formatter):\r\n    \"\"\"\r\n    Allows to handle custom placeholders 'title_color' and 'message_no_color'.\r\n    To use this formatter, make sure to pass 'color', 'title' as log extras.\r\n    \"\"\"\r\n\r\n    def format(self, record: LogRecord) -> str:\r\n        if hasattr(record, \"color\"):\r\n            record.title_color = (\r\n                getattr(record, \"color\")\r\n                + getattr(record, \"title\")\r\n                + \" \"\r\n                + Style.RESET_ALL\r\n            )\r\n        else:\r\n            record.title_color = getattr(record, \"title\")\r\n        if hasattr(record, \"msg\"):\r\n            record.message_no_color = remove_color_codes(getattr(record, \"msg\"))\r\n        else:\r\n            record.message_no_color = \"\"\r\n        return super().format(record)\r\n\r\n\r\ndef remove_color_codes(s: str) -> str:\r\n    ansi_escape = re.compile(r\"\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])\")\r\n    return ansi_escape.sub(\"\", s)\r\n\r\n\r\nlogger = Logger()\r\n\r\n\r\ndef print_assistant_thoughts(\r\n    ai_name: object,\r\n    assistant_reply_json_valid: object,\r\n    speak_mode: bool = False,\r\n) -> None:\r\n    assistant_thoughts_reasoning = None\r\n    assistant_thoughts_plan = None\r\n    assistant_thoughts_speak = None\r\n    assistant_thoughts_criticism = None\r\n\r\n    assistant_thoughts = assistant_reply_json_valid.get(\"thoughts\", {})\r\n    assistant_thoughts_text = assistant_thoughts.get(\"text\")\r\n    if assistant_thoughts:\r\n        assistant_thoughts_reasoning = assistant_thoughts.get(\"reasoning\")\r\n        assistant_thoughts_plan = assistant_thoughts.get(\"plan\")\r\n        assistant_thoughts_criticism = assistant_thoughts.get(\"criticism\")\r\n        assistant_thoughts_speak = assistant_thoughts.get(\"speak\")\r\n    logger.typewriter_log(\r\n        f\"{ai_name.upper()} THOUGHTS:\", Fore.YELLOW, f\"{assistant_thoughts_text}\"\r\n    )\r\n    logger.typewriter_log(\"REASONING:\", Fore.YELLOW, f\"{assistant_thoughts_reasoning}\")\r\n    if assistant_thoughts_plan:\r\n        logger.typewriter_log(\"PLAN:\", Fore.YELLOW, \"\")\r\n        # If it's a list, join it into a string\r\n        if isinstance(assistant_thoughts_plan, list):\r\n            assistant_thoughts_plan = \"\\n\".join(assistant_thoughts_plan)\r\n        elif isinstance(assistant_thoughts_plan, dict):\r\n            assistant_thoughts_plan = str(assistant_thoughts_plan)\r\n\r\n        # Split the input_string using the newline character and dashes\r\n        lines = assistant_thoughts_plan.split(\"\\n\")\r\n        for line in lines:\r\n            line = line.lstrip(\"- \")\r\n            logger.typewriter_log(\"- \", Fore.GREEN, line.strip())\r\n    logger.typewriter_log(\"CRITICISM:\", Fore.YELLOW, f\"{assistant_thoughts_criticism}\")\r\n    # Speak the assistant's thoughts\r\n    if speak_mode and assistant_thoughts_speak:\r\n        say_text(assistant_thoughts_speak)", "reactions": {"url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/3400/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/Significant-Gravitas/Auto-GPT/issues/3400/timeline", "performed_via_github_app": null, "state_reason": null}